QUERY TEMPLATE

FOR ALL RESPONSES:
Rephrase my question in English
If there is code, display it first in the response
If there is a link, display it first in the response

REQUEST:genetate tests for the following code:

CODE:
GPT4Module.fs:
module GPT4Module

open System
open System.Net.Http
open System.Text.Json
open FSharp.Data

// Define Gpt4Response and RequestBody types
type Gpt4Response = JsonProvider<"""{ "id": "", "object": "", "created": 0, "model": "", "usage": { "prompt_tokens": 0, "completion_tokens": 0, "total_tokens": 0 }, "choices": [ { "text": "", "index": 0, "logprobs": null, "finish_reason": "" } ] }""">
type RequestBody = { prompt : string; max_tokens : int; n : int }

let createAuthorizedHttpClient (apiKey: string) : HttpClient = 
    let client = new HttpClient()
    client.DefaultRequestHeaders.Authorization <- new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", apiKey)
    client

let sendGpt4Request (client: HttpClient) (baseUrl: string) (requestBody: RequestBody) : Async<HttpResponseMessage> =
    async {
        let requestJson = JsonSerializer.Serialize(requestBody)
        let content = new StringContent(requestJson, System.Text.Encoding.UTF8, "application/json")
        let! response = client.PostAsync(baseUrl, content) |> Async.AwaitTask
        return response
    }

let handleResponse (response: HttpResponseMessage) : Async<unit> =
    async {
        if response.IsSuccessStatusCode then
            let! content = response.Content.ReadAsStringAsync() |> Async.AwaitTask
            let gpt4Response = Gpt4Response.Parse(content)
            let generatedText = gpt4Response.Choices.[0].Text
            let trimmedText = generatedText.ToString()
            printfn "%s" trimmedText
        else
            printfn "Error: %s" response.ReasonPhrase
    }

let main (apiKey: string) (prompt: string) (maxTokens: int) (n: int) : unit =
    if String.IsNullOrEmpty(apiKey) then
        printfn "Error: Please set the OPENAI_API_KEY environment variable."
    else
        let baseUrl = "https://api.openai.com/v1/engines/text-davinci-002/completions"
        let client = createAuthorizedHttpClient apiKey
        let requestBody = { prompt = prompt; max_tokens = maxTokens; n = n }
        async {
            let! response = sendGpt4Request client baseUrl requestBody
            do! handleResponse response
        }
        |> Async.RunSynchronously
Program.fs
open System
open Argu
open GPT4Module

let defaultPrompt = "Kérlek, mondj valamit érdekeset az emberi életről."
let defaultMaxTokens = 500
let defaultN = 1

type CommandLineArgs =
    | [<MainCommand>] ApiKey of apiKey: string
    | Prompt of prompt: string
    | [<AltCommandLine("maxTokens", "mt")>] MaxTokens of maxTokens: int
    | [<AltCommandLine("n", "num")>] N of n: int
    | [<CliPrefix(CliPrefix.None); CustomCommandLine("help")>] Help
    with
        interface IArgParserTemplate with
            member this.Usage =
                match this with
                | ApiKey _ -> "Your OpenAI API key. Can be set as an environment variable (OPENAI_API_KEY)."
                | Prompt _ -> "The text prompt for the GPT-4 model. Default is: " + defaultPrompt
                | MaxTokens _ -> "The maximum number of tokens in the generated text. Default is " + string defaultMaxTokens + "."
                | N _ -> "The number of generated text choices. Default is " + string defaultN + "."
                | Help -> "Display this help text."

let printHelp (parser:ArgumentParser<CommandLineArgs>)=
    printfn "Usage: GPT4App --api-key API_KEY --prompt PROMPT [--max-tokens MAX_TOKENS] [--n N]"
    printfn "%s" (parser.PrintUsage())

[<EntryPoint>]
let main args =
    let parser : ArgumentParser<CommandLineArgs> = ArgumentParser.Create<CommandLineArgs>()
    let parsedArgs = parser.Parse(args)

    try
        if parsedArgs.Contains Help then
            printHelp parser
        else
            let apiKey =
                match parsedArgs.TryGetResult(ApiKey) with
                | Some apiKey -> apiKey
                | None -> System.Environment.GetEnvironmentVariable("OPENAI_API_KEY")
            
            let prompt = parsedArgs.GetResult(Prompt, defaultPrompt)
            let maxTokens = parsedArgs.GetResult(MaxTokens, defaultMaxTokens)
            let n = parsedArgs.GetResult(N, defaultN)

            GPT4Module.main apiKey prompt maxTokens n
        0
    with
    | :? ArguParseException as ex ->
        printfn "Error: %s" ex.Message
        printHelp parser
        -1
